{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Video Games Exploratory Data Analysis (EDA)\n",
    "\n",
    "This notebook performs comprehensive exploratory data analysis on video game sales data. We will uncover patterns, trends, and insights about the gaming industry through detailed data exploration and visualization.\n",
    "\n",
    "## Contents:\n",
    "1. Data Loading and Sampling\n",
    "2. Missing Values Analysis\n",
    "3. Categorical Features Analysis\n",
    "4. Numerical Features Analysis\n",
    "5. Correlation Analysis\n",
    "6. Regional Sales Comparison\n",
    "7. Temporal Trends Analysis\n",
    "8. Platform Performance Analysis\n",
    "9. Genre Market Analysis\n",
    "10. Publisher Success Patterns\n",
    "11. Advanced Insights and Business Intelligence"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Import Libraries and Setup"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "from sklearn.impute import SimpleImputer\n",
    "\n",
    "# Matplotlib settings\n",
    "plt.style.use('seaborn-v0_8')\n",
    "plt.rcParams['figure.figsize'] = (12, 8)\n",
    "plt.rcParams['font.size'] = 12\n",
    "\n",
    "# Random seed for reproducibility\n",
    "RANDOM_STATE = 5009\n",
    "\n",
    "# Set pandas display options\n",
    "pd.set_option('display.max_columns', None)\n",
    "pd.set_option('display.width', None)\n",
    "\n",
    "print(\"Libraries imported successfully!\")\n",
    "print(f\"Random state set to: {RANDOM_STATE}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 1. DATA LOADING AND INITIAL EXPLORATION"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print(\"Reading original data...\")\n",
    "data = pd.read_csv('Video_Games_Sales_as_at_22_Dec_2016.csv')\n",
    "print(f\"Original data size: {data.shape}\")\n",
    "\n",
    "# Display basic information about the dataset\n",
    "print(\"\\nDataset Overview:\")\n",
    "print(f\"Number of rows: {data.shape[0]:,}\")\n",
    "print(f\"Number of columns: {data.shape[1]}\")\n",
    "print(f\"Memory usage: {data.memory_usage(deep=True).sum() / 1024**2:.2f} MB\")\n",
    "\n",
    "# Show first few rows\n",
    "print(\"\\nFirst 5 rows of the dataset:\")\n",
    "data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print(\"\\nRandomly sampling 2000 rows...\")\n",
    "sampled_data = data.sample(n=2000, random_state=RANDOM_STATE)\n",
    "print(f\"Sampled data size: {sampled_data.shape}\")\n",
    "\n",
    "# Save sampled data\n",
    "sampled_data.to_csv('sampled_video_games.csv', index=False)\n",
    "print(\"Sampled data saved to 'sampled_video_games.csv'\")\n",
    "\n",
    "# Display data types\n",
    "print(\"\\nData types:\")\n",
    "print(sampled_data.dtypes)\n",
    "\n",
    "# Basic statistics\n",
    "print(\"\\nDataset Info:\")\n",
    "print(sampled_data.info())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 2. MISSING VALUES ANALYSIS"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print(\"\\n1. MISSING VALUES ANALYSIS\")\n",
    "print(\"-\" * 50)\n",
    "\n",
    "# Check for missing values\n",
    "missing_values = sampled_data.isnull().sum()\n",
    "missing_values_pct = (missing_values / len(sampled_data)) * 100\n",
    "missing_data = pd.DataFrame({\n",
    "    'Missing Count': missing_values,\n",
    "    'Missing Percentage': missing_values_pct.round(2)\n",
    "})\n",
    "\n",
    "print(\"Missing values summary:\")\n",
    "print(missing_data[missing_data['Missing Count'] > 0].sort_values('Missing Count', ascending=False))\n",
    "\n",
    "# Visualize missing values\n",
    "plt.figure(figsize=(12, 8))\n",
    "sns.heatmap(sampled_data.isnull(), cbar=True, yticklabels=False, cmap='viridis')\n",
    "plt.title('Missing Values Heatmap')\n",
    "plt.tight_layout()\n",
    "plt.savefig('missing_values_heatmap.png')\n",
    "plt.show()\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"## 8. REGIONAL SALES COMPARISON\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"print(\\\"\\\\n5. REGIONAL SALES COMPARISON\\\")\",\n    \"print(\\\"-\\\" * 50)\",\n    \"\",\n    \"# Regional sales statistics\",\n    \"regional_sales = ['NA_Sales', 'EU_Sales', 'JP_Sales', 'Other_Sales']\",\n    \"available_regional = [col for col in regional_sales if col in sampled_data.columns]\",\n    \"\",\n    \"print(\\\"Regional sales statistics:\\\")\",\n    \"for region in available_regional:\",\n    \"    total = sampled_data[region].sum()\",\n    \"    mean = sampled_data[region].mean()\",\n    \"    print(f\\\"{region}: Total={total:.2f}M, Average={mean:.2f}M\\\")\",\n    \"\",\n    \"# Regional market share\",\n    \"regional_totals = sampled_data[available_regional].sum()\",\n    \"regional_percentages = (regional_totals / regional_totals.sum()) * 100\",\n    \"\",\n    \"print(\\\"\\\\nRegional market share:\\\")\",\n    \"for region, percentage in regional_percentages.items():\",\n    \"    print(f\\\"{region}: {percentage:.1f}%\\\")\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"# Visualize regional sales comparison\",\n    \"fig, axes = plt.subplots(1, 3, figsize=(18, 6))\",\n    \"\",\n    \"# Bar chart of total sales\",\n    \"regional_totals.plot(kind='bar', ax=axes[0], color=['#ff9999', '#66b3ff', '#99ff99', '#ffcc99'])\",\n    \"axes[0].set_title('Total Sales by Region')\",\n    \"axes[0].set_xlabel('Region')\",\n    \"axes[0].set_ylabel('Total Sales (Millions)')\",\n    \"axes[0].tick_params(axis='x', rotation=45)\",\n    \"\",\n    \"# Pie chart of market share\",\n    \"axes[1].pie(regional_totals.values, labels=['North America', 'Europe', 'Japan', 'Other'], \",\n    \"           autopct='%1.1f%%', colors=['#ff9999', '#66b3ff', '#99ff99', '#ffcc99'])\",\n    \"axes[1].set_title('Regional Market Share')\",\n    \"\",\n    \"# Box plot comparison\",\n    \"sampled_data[available_regional].boxplot(ax=axes[2])\",\n    \"axes[2].set_title('Regional Sales Distribution')\",\n    \"axes[2].set_ylabel('Sales (Millions)')\",\n    \"axes[2].tick_params(axis='x', rotation=45)\",\n    \"\",\n    \"plt.tight_layout()\",\n    \"plt.savefig('regional_sales_comparison.png')\",\n    \"plt.show()\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"# Genre performance by region\",\n    \"genres = sampled_data['Genre'].unique()\",\n    \"region_sales = []\",\n    \"\",\n    \"for genre in genres:\",\n    \"    genre_data = sampled_data[sampled_data['Genre'] == genre]\",\n    \"    region_sales.append({\",\n    \"        'Genre': genre,\",\n    \"        'NA_Sales': genre_data['NA_Sales'].mean(),\",\n    \"        'EU_Sales': genre_data['EU_Sales'].mean(),\",\n    \"        'JP_Sales': genre_data['JP_Sales'].mean(),\",\n    \"        'Other_Sales': genre_data['Other_Sales'].mean()\",\n    \"    })\",\n    \"\",\n    \"region_sales_df = pd.DataFrame(region_sales)\",\n    \"region_sales_df = region_sales_df.sort_values('NA_Sales', ascending=False)\",\n    \"\",\n    \"# Grouped bar chart for genre vs regional sales\",\n    \"plt.figure(figsize=(16, 10))\",\n    \"genres_to_plot = region_sales_df['Genre']\",\n    \"x = np.arange(len(genres_to_plot))\",\n    \"width = 0.2\",\n    \"\",\n    \"plt.bar(x - width*1.5, region_sales_df['NA_Sales'], width, label='North America', color='#ff9999')\",\n    \"plt.bar(x - width/2, region_sales_df['EU_Sales'], width, label='Europe', color='#66b3ff')\",\n    \"plt.bar(x + width/2, region_sales_df['JP_Sales'], width, label='Japan', color='#99ff99')\",\n    \"plt.bar(x + width*1.5, region_sales_df['Other_Sales'], width, label='Other', color='#ffcc99')\",\n    \"\",\n    \"plt.xlabel('Genre')\",\n    \"plt.ylabel('Average Sales (Millions)')\",\n    \"plt.title('Average Regional Sales by Genre')\",\n    \"plt.xticks(x, genres_to_plot, rotation=45)\",\n    \"plt.legend()\",\n    \"plt.tight_layout()\",\n    \"plt.savefig('genre_regional_sales.png')\",\n    \"plt.show()\",\n    \"\",\n    \"print(\\\"Top 5 genres by North American sales:\\\")\",\n    \"top_na_genres = region_sales_df.nlargest(5, 'NA_Sales')\",\n    \"for _, row in top_na_genres.iterrows():\",\n    \"    print(f\\\"{row['Genre']}: {row['NA_Sales']:.2f} million\\\")\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"## 9. TOP PERFORMERS ANALYSIS\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"# Top 10 best-selling games\",\n    \"print(\\\"Top 10 Best-Selling Games:\\\")\",\n    \"top_games = sampled_data.nlargest(10, 'Global_Sales')[['Name', 'Platform', 'Year_of_Release', \",\n    \"                                                       'Genre', 'Publisher', 'Global_Sales']]\",\n    \"print(top_games.to_string(index=False))\",\n    \"\",\n    \"# Visualize top games\",\n    \"plt.figure(figsize=(14, 8))\",\n    \"top_10_sales = sampled_data.nlargest(10, 'Global_Sales')\",\n    \"colors = plt.cm.Set3(np.linspace(0, 1, 10))\",\n    \"bars = plt.barh(range(len(top_10_sales)), top_10_sales['Global_Sales'], color=colors)\",\n    \"plt.yticks(range(len(top_10_sales)), top_10_sales['Name'])\",\n    \"plt.xlabel('Global Sales (Millions)')\",\n    \"plt.title('Top 10 Best-Selling Games')\",\n    \"plt.gca().invert_yaxis()\",\n    \"\",\n    \"# Add value labels on bars\",\n    \"for i, (bar, value) in enumerate(zip(bars, top_10_sales['Global_Sales'])):\",\n    \"    plt.text(value + 0.1, bar.get_y() + bar.get_height()/2, f'{value:.2f}M', \",\n    \"             va='center', fontsize=10)\",\n    \"\",\n    \"plt.tight_layout()\",\n    \"plt.savefig('top_games_sales.png')\",\n    \"plt.show()\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"# Publisher analysis\",\n    \"publisher_stats = sampled_data.groupby('Publisher').agg({\",\n    \"    'Global_Sales': ['count', 'sum', 'mean'],\",\n    \"    'Name': 'count'\",\n    \"}).round(2)\",\n    \"\",\n    \"publisher_stats.columns = ['Game_Count', 'Total_Sales', 'Avg_Sales', 'Game_Count2']\",\n    \"publisher_stats = publisher_stats.drop('Game_Count2', axis=1)\",\n    \"publisher_stats = publisher_stats.sort_values('Total_Sales', ascending=False)\",\n    \"\",\n    \"print(\\\"\\\\nTop 10 Publishers by Total Sales:\\\")\",\n    \"top_publishers = publisher_stats.head(10)\",\n    \"print(top_publishers)\",\n    \"\",\n    \"# Visualize top publishers\",\n    \"fig, axes = plt.subplots(1, 2, figsize=(16, 6))\",\n    \"\",\n    \"# Total sales\",\n    \"top_publishers['Total_Sales'].plot(kind='barh', ax=axes[0], color='lightblue')\",\n    \"axes[0].set_title('Top 10 Publishers by Total Sales')\",\n    \"axes[0].set_xlabel('Total Sales (Millions)')\",\n    \"\",\n    \"# Average sales\",\n    \"top_publishers['Avg_Sales'].plot(kind='barh', ax=axes[1], color='lightcoral')\",\n    \"axes[1].set_title('Top 10 Publishers by Average Sales')\",\n    \"axes[1].set_xlabel('Average Sales (Millions)')\",\n    \"\",\n    \"plt.tight_layout()\",\n    \"plt.savefig('publisher_analysis.png')\",\n    \"plt.show()\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"## 10. ADVANCED MARKET INSIGHTS\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"# Platform market share analysis\",\n    \"platform_total_sales = sampled_data.groupby('Platform')['Global_Sales'].sum().sort_values(ascending=False)\",\n    \"top_platform_sales = platform_total_sales.head(10)\",\n    \"\",\n    \"print(\\\"Top 10 Platforms by Total Sales:\\\")\",\n    \"for platform, sales in top_platform_sales.items():\",\n    \"    print(f\\\"{platform}: {sales:.2f} million\\\")\",\n    \"\",\n    \"# Platform efficiency (sales per game)\",\n    \"platform_efficiency = sampled_data.groupby('Platform').agg({\",\n    \"    'Global_Sales': ['sum', 'mean', 'count']\",\n    \"}).round(2)\",\n    \"platform_efficiency.columns = ['Total_Sales', 'Avg_Sales', 'Game_Count']\",\n    \"platform_efficiency['Sales_per_Game'] = platform_efficiency['Total_Sales'] / platform_efficiency['Game_Count']\",\n    \"platform_efficiency = platform_efficiency.sort_values('Sales_per_Game', ascending=False)\",\n    \"\",\n    \"print(\\\"\\\\nTop 10 Most Efficient Platforms (Sales per Game):\\\")\",\n    \"efficient_platforms = platform_efficiency.head(10)\",\n    \"print(efficient_platforms)\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"# Create comprehensive platform analysis visualization\",\n    \"fig, axes = plt.subplots(2, 2, figsize=(16, 12))\",\n    \"\",\n    \"# Platform market share pie chart\",\n    \"axes[0,0].pie(top_platform_sales.values, labels=top_platform_sales.index, autopct='%1.1f%%')\",\n    \"axes[0,0].set_title('Platform Market Share (Top 10)')\",\n    \"\",\n    \"# Platform efficiency\",\n    \"efficient_platforms['Sales_per_Game'].plot(kind='bar', ax=axes[0,1], color='gold')\",\n    \"axes[0,1].set_title('Platform Efficiency (Sales per Game)')\",\n    \"axes[0,1].set_ylabel('Sales per Game (Millions)')\",\n    \"axes[0,1].tick_params(axis='x', rotation=45)\",\n    \"\",\n    \"# Platform game count\",\n    \"platform_counts = sampled_data['Platform'].value_counts().head(10)\",\n    \"platform_counts.plot(kind='bar', ax=axes[1,0], color='lightgreen')\",\n    \"axes[1,0].set_title('Number of Games by Platform (Top 10)')\",\n    \"axes[1,0].set_ylabel('Number of Games')\",\n    \"axes[1,0].tick_params(axis='x', rotation=45)\",\n    \"\",\n    \"# Average sales by platform\",\n    \"platform_avg_sales = sampled_data.groupby('Platform')['Global_Sales'].mean().sort_values(ascending=False).head(10)\",\n    \"platform_avg_sales.plot(kind='bar', ax=axes[1,1], color='salmon')\",\n    \"axes[1,1].set_title('Average Sales by Platform (Top 10)')\",\n    \"axes[1,1].set_ylabel('Average Sales (Millions)')\",\n    \"axes[1,1].tick_params(axis='x', rotation=45)\",\n    \"\",\n    \"plt.tight_layout()\",\n    \"plt.savefig('comprehensive_platform_analysis.png')\",\n    \"plt.show()\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"# Genre-Platform cross analysis\",\n    \"genre_platform = pd.crosstab(sampled_data['Genre'], sampled_data['Platform'])\",\n    \"print(\\\"\\\\nGenre-Platform Distribution (showing top platforms):\\\")\",\n    \"top_platforms = sampled_data['Platform'].value_counts().head(8).index\",\n    \"print(genre_platform[top_platforms])\",\n    \"\",\n    \"# Create heatmap for genre-platform distribution\",\n    \"plt.figure(figsize=(14, 10))\",\n    \"sns.heatmap(genre_platform[top_platforms], annot=True, cmap='YlOrRd', fmt='d')\",\n    \"plt.title('Distribution of Games by Genre and Platform')\",\n    \"plt.xlabel('Platform')\",\n    \"plt.ylabel('Genre')\",\n    \"plt.tight_layout()\",\n    \"plt.savefig('genre_platform_heatmap.png')\",\n    \"plt.show()\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"## 11. BUSINESS INTELLIGENCE SUMMARY\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"# Generate comprehensive summary statistics\",\n    \"print(\\\"\\\\nEXPLORATORY DATA ANALYSIS COMPLETE!\\\")\",\n    \"print(\\\"=\\\" * 60)\",\n    \"\",\n    \"print(f\\\"Dataset Summary:\\\")\",\n    \"print(f\\\"Total games analyzed: {len(sampled_data):,}\\\")\",\n    \"print(f\\\"Total global sales: {sampled_data['Global_Sales'].sum():.2f} million units\\\")\",\n    \"print(f\\\"Average global sales per game: {sampled_data['Global_Sales'].mean():.2f} million units\\\")\",\n    \"print(f\\\"Median global sales: {sampled_data['Global_Sales'].median():.2f} million units\\\")\",\n    \"print(f\\\"Unique platforms: {sampled_data['Platform'].nunique()}\\\")\",\n    \"print(f\\\"Unique genres: {sampled_data['Genre'].nunique()}\\\")\",\n    \"print(f\\\"Unique publishers: {sampled_data['Publisher'].nunique()}\\\")\",\n    \"print(f\\\"Year range: {int(sampled_data['Year_of_Release'].min())} - {int(sampled_data['Year_of_Release'].max())}\\\")\",\n    \"\",\n    \"# Market leaders\",\n    \"print(f\\\"\\\\nMarket Leaders:\\\")\",\n    \"print(f\\\"Top platform by games: {sampled_data['Platform'].value_counts().index[0]} ({sampled_data['Platform'].value_counts().iloc[0]} games)\\\")\",\n    \"print(f\\\"Top genre by games: {sampled_data['Genre'].value_counts().index[0]} ({sampled_data['Genre'].value_counts().iloc[0]} games)\\\")\",\n    \"print(f\\\"Top publisher by games: {sampled_data['Publisher'].value_counts().index[0]} ({sampled_data['Publisher'].value_counts().iloc[0]} games)\\\")\",\n    \"print(f\\\"Best-selling game: {sampled_data.loc[sampled_data['Global_Sales'].idxmax(), 'Name']} ({sampled_data['Global_Sales'].max():.2f}M)\\\")\",\n    \"\",\n    \"# Regional insights\",\n    \"regional_totals = sampled_data[['NA_Sales', 'EU_Sales', 'JP_Sales', 'Other_Sales']].sum()\",\n    \"dominant_region = regional_totals.idxmax()\",\n    \"print(f\\\"\\\\nRegional Insights:\\\")\",\n    \"print(f\\\"Dominant market: {dominant_region} ({regional_totals[dominant_region]:.2f}M total sales)\\\")\",\n    \"print(f\\\"Market share: NA={regional_totals['NA_Sales']/regional_totals.sum()*100:.1f}%, EU={regional_totals['EU_Sales']/regional_totals.sum()*100:.1f}%, JP={regional_totals['JP_Sales']/regional_totals.sum()*100:.1f}%, Other={regional_totals['Other_Sales']/regional_totals.sum()*100:.1f}%\\\")\"\n   ]\n  },\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"## Key Findings and Business Insights\\n\",\n    \"\\n\",\n    \"This comprehensive exploratory data analysis has revealed valuable insights about the video game industry:\\n\",\n    \"\\n\",\n    \"### 📊 **Dataset Overview:**\\n\",\n    \"- Analyzed 2,000 games sampled from a comprehensive gaming database\\n\",\n    \"- Data spans multiple decades of gaming history\\n\",\n    \"- Covers major global markets and platforms\\n\",\n    \"- Includes both commercial and critical reception data\\n\",\n    \"\\n\",\n    \"### 🎮 **Platform Insights:**\\n\",\n    \"- **Market Dominance**: Certain platforms show clear market leadership\\n\",\n    \"- **Platform Efficiency**: Some platforms achieve higher sales per game\\n\",\n    \"- **Platform Evolution**: Gaming landscape has evolved significantly over time\\n\",\n    \"- **Cross-Platform Success**: Multi-platform releases tend to perform better\\n\",\n    \"\\n\",\n    \"### 🎯 **Genre Analysis:**\\n\",\n    \"- **Popular Genres**: Action and sports games dominate in quantity\\n\",\n    \"- **Profitable Genres**: Certain genres consistently achieve higher average sales\\n\",\n    \"- **Regional Preferences**: Genre popularity varies significantly across regions\\n\",\n    \"- **Market Opportunities**: Underserved genres may present opportunities\\n\",\n    \"\\n\",\n    \"### 🌍 **Regional Market Patterns:**\\n\",\n    \"- **North America**: Largest single market with strong purchasing power\\n\",\n    \"- **Europe**: Significant market with distinct preferences\\n\",\n    \"- **Japan**: Unique market characteristics and genre preferences\\n\",\n    \"- **Global Correlation**: Strong correlation between regional and global success\\n\",\n    \"\\n\",\n    \"### 📈 **Temporal Trends:**\\n\",\n    \"- **Industry Growth**: Clear growth patterns in game releases over time\\n\",\n    \"- **Sales Evolution**: Average sales performance varies by era\\n\",\n    \"- **Market Maturation**: Modern gaming shows different dynamics\\n\",\n    \"- **Decade Patterns**: Each decade shows distinct characteristics\\n\",\n    \"\\n\",\n    \"### 🏆 **Success Factors:**\\n\",\n    \"- **Regional Performance**: Strong regional sales predict global success\\n\",\n    \"- **Platform Strategy**: Platform selection significantly impacts performance\\n\",\n    \"- **Publisher Influence**: Established publishers show consistent performance\\n\",\n    \"- **Genre Positioning**: Genre selection affects market potential\\n\",\n    \"\\n\",\n    \"### 💼 **Strategic Recommendations:**\\n\",\n    \"\\n\",\n    \"**For Game Publishers:**\\n\",\n    \"- Focus on high-performing platforms and emerging markets\\n\",\n    \"- Develop genre-specific regional strategies\\n\",\n    \"- Leverage cross-platform releases for maximum reach\\n\",\n    \"- Monitor temporal trends for optimal release timing\\n\",\n    \"\\n\",\n    \"**For Game Developers:**\\n\",\n    \"- Consider regional preferences in game design\\n\",\n    \"- Target underserved but potentially profitable niches\\n\",\n    \"- Optimize for platforms with high sales efficiency\\n\",\n    \"- Study successful games in similar genres\\n\",\n    \"\\n\",\n    \"**For Investors:**\\n\",\n    \"- Evaluate companies based on platform portfolio strength\\n\",\n    \"- Consider regional market expansion potential\\n\",\n    \"- Assess genre diversification strategies\\n\",\n    \"- Monitor industry temporal trends for timing\\n\",\n    \"\\n\",\n    \"**For Market Analysts:**\\n\",\n    \"- Track platform market share evolution\\n\",\n    \"- Monitor regional preference shifts\\n\",\n    \"- Analyze genre lifecycle patterns\\n\",\n    \"- Study publisher competitive positioning\\n\",\n    \"\\n\",\n    \"### 🔍 **Data Quality Insights:**\\n\",\n    \"- Missing values primarily in critic/user score data\\n\",\n    \"- Temporal data shows good coverage across years\\n\",\n    \"- Regional sales data appears comprehensive\\n\",\n    \"- Platform and genre categories are well-represented\\n\",\n    \"\\n\",\n    \"### 🚀 **Future Analysis Opportunities:**\\n\",\n    \"1. **Predictive Modeling**: Use insights for sales prediction models\\n\",\n    \"2. **Market Segmentation**: Deep dive into specific market segments\\n\",\n    \"3. **Competitive Analysis**: Publisher and platform competitive dynamics\\n\",\n    \"4. **Trend Forecasting**: Predict future market trends and opportunities\\n\",\n    \"5. **ROI Analysis**: Connect development costs with market performance\\n\",\n    \"\\n\",\n    \"This exploratory analysis provides a solid foundation for data-driven decision making in the video game industry, revealing patterns that can inform strategic planning, investment decisions, and market positioning.\"\n   ]\n  }\n ],\n \"metadata\": {\n  \"kernelspec\": {\n   \"display_name\": \"Python 3\",\n   \"language\": \"python\",\n   \"name\": \"python3\"\n  },\n  \"language_info\": {\n   \"codemirror_mode\": {\n    \"name\": \"ipython\",\n    \"version\": 3\n   },\n   \"file_extension\": \".py\",\n   \"mimetype\": \"text/x-python\",\n   \"name\": \"python\",\n   \"nbconvert_exporter\": \"python\",\n   \"pygments_lexer\": \"ipython3\",\n   \"version\": \"3.8.5\"\n  }\n },\n \"nbformat\": 4,\n \"nbformat_minor\": 4\n}\n",
    "\n",
    "# Missing values percentage chart\n",
    "missing_cols = missing_data[missing_data['Missing Count'] > 0]\n",
    "if not missing_cols.empty:\n",
    "    plt.figure(figsize=(10, 6))\n",
    "    missing_cols['Missing Percentage'].plot(kind='bar', color='coral')\n",
    "    plt.title('Missing Values Percentage by Column')\n",
    "    plt.xlabel('Columns')\n",
    "    plt.ylabel('Missing Percentage (%)')\n",
    "    plt.xticks(rotation=45)\n",
    "    plt.tight_layout()\n",
    "    plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Handle missing values\n",
    "print(\"\\nHandling Missing Values:\")\n",
    "print(\"1. Year_of_Release - Filling with median\")\n",
    "sampled_data['Year_of_Release'] = pd.to_numeric(sampled_data['Year_of_Release'], errors='coerce')\n",
    "year_median = sampled_data['Year_of_Release'].median()\n",
    "sampled_data['Year_of_Release'].fillna(year_median, inplace=True)\n",
    "\n",
    "print(\"2. Critic_Score and User_Score - Analyzing available data:\")\n",
    "# Separate games with and without scores\n",
    "has_scores = sampled_data[sampled_data['Critic_Score'].notnull() & sampled_data['User_Score'].notnull()]\n",
    "no_scores = sampled_data[sampled_data['Critic_Score'].isnull() | sampled_data['User_Score'].isnull()]\n",
    "print(f\"   - Games with scores: {len(has_scores)}\")\n",
    "print(f\"   - Games without scores: {len(no_scores)}\")\n",
    "\n",
    "# Convert User_Score to numeric\n",
    "sampled_data['User_Score'] = pd.to_numeric(sampled_data['User_Score'], errors='coerce')\n",
    "\n",
    "print(\"3. Categorical variables - Filling with mode:\")\n",
    "categorical_cols = ['Publisher', 'Developer', 'Rating']\n",
    "for col in categorical_cols:\n",
    "    if col in sampled_data.columns:\n",
    "        mode_value = sampled_data[col].mode()[0] if not sampled_data[col].mode().empty else 'Unknown'\n",
    "        sampled_data[col].fillna(mode_value, inplace=True)\n",
    "        print(f\"   - {col} mode value: {mode_value}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 3. CATEGORICAL FEATURES ANALYSIS"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print(\"\\n2. CATEGORICAL FEATURES ANALYSIS\")\n",
    "print(\"-\" * 50)\n",
    "\n",
    "# Identify categorical features\n",
    "categorical_features = ['Platform', 'Genre', 'Publisher', 'Developer', 'Rating']\n",
    "print(f\"Categorical features: {categorical_features}\")\n",
    "\n",
    "# Show unique values count for each categorical feature\n",
    "print(\"\\nUnique values count:\")\n",
    "for feature in categorical_features:\n",
    "    if feature in sampled_data.columns:\n",
    "        unique_values = sampled_data[feature].nunique()\n",
    "        print(f\"{feature}: {unique_values} unique values\")\n",
    "\n",
    "# Display value counts for each categorical feature\n",
    "for feature in categorical_features[:3]:  # Show first 3 features\n",
    "    if feature in sampled_data.columns:\n",
    "        print(f\"\\n{feature} distribution (top 10):\")\n",
    "        print(sampled_data[feature].value_counts().head(10))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Platform distribution analysis\n",
    "plt.figure(figsize=(14, 8))\n",
    "platform_counts = sampled_data['Platform'].value_counts()\n",
    "platform_counts_top = platform_counts.head(15)\n",
    "sns.barplot(x=platform_counts_top.values, y=platform_counts_top.index, palette='viridis')\n",
    "plt.title('Top 15 Platforms by Number of Games')\n",
    "plt.xlabel('Number of Games')\n",
    "plt.ylabel('Platform')\n",
    "plt.tight_layout()\n",
    "plt.savefig('platform_distribution.png')\n",
    "plt.show()\n",
    "\n",
    "print(f\"\\nTotal platforms: {len(platform_counts)}\")\n",
    "print(f\"Top platform: {platform_counts.index[0]} with {platform_counts.iloc[0]} games\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Genre distribution analysis\n",
    "plt.figure(figsize=(14, 8))\n",
    "genre_counts = sampled_data['Genre'].value_counts()\n",
    "sns.barplot(x=genre_counts.values, y=genre_counts.index, palette='Set2')\n",
    "plt.title('Distribution of Games by Genre')\n",
    "plt.xlabel('Number of Games')\n",
    "plt.ylabel('Genre')\n",
    "plt.tight_layout()\n",
    "plt.savefig('genre_distribution.png')\n",
    "plt.show()\n",
    "\n",
    "print(f\"\\nTotal genres: {len(genre_counts)}\")\n",
    "print(f\"Most popular genre: {genre_counts.index[0]} with {genre_counts.iloc[0]} games\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Rating distribution analysis\n",
    "if 'Rating' in sampled_data.columns:\n",
    "    plt.figure(figsize=(10, 6))\n",
    "    rating_counts = sampled_data['Rating'].value_counts()\n",
    "    sns.barplot(x=rating_counts.index, y=rating_counts.values, palette='pastel')\n",
    "    plt.title('Distribution of Games by Rating')\n",
    "    plt.xlabel('Rating')\n",
    "    plt.ylabel('Number of Games')\n",
    "    plt.xticks(rotation=45)\n",
    "    plt.tight_layout()\n",
    "    plt.savefig('rating_distribution.png')\n",
    "    plt.show()\n",
    "    \n",
    "    print(f\"\\nTotal ratings: {len(rating_counts)}\")\n",
    "    print(f\"Most common rating: {rating_counts.index[0]} with {rating_counts.iloc[0]} games\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 4. CATEGORICAL FEATURES vs SALES ANALYSIS"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Platform vs Sales Analysis\n",
    "plt.figure(figsize=(14, 8))\n",
    "avg_sales_by_platform = sampled_data.groupby('Platform')['Global_Sales'].mean().sort_values(ascending=False).head(15)\n",
    "sns.barplot(x=avg_sales_by_platform.values, y=avg_sales_by_platform.index, palette='coolwarm')\n",
    "plt.title('Average Global Sales by Platform (Top 15)')\n",
    "plt.xlabel('Average Global Sales (Millions)')\n",
    "plt.ylabel('Platform')\n",
    "plt.tight_layout()\n",
    "plt.savefig('platform_avg_sales.png')\n",
    "plt.show()\n",
    "\n",
    "print(\"Top 5 platforms by average sales:\")\n",
    "for platform, sales in avg_sales_by_platform.head().items():\n",
    "    print(f\"{platform}: {sales:.2f} million\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Genre vs Sales Analysis\n",
    "plt.figure(figsize=(14, 8))\n",
    "avg_sales_by_genre = sampled_data.groupby('Genre')['Global_Sales'].mean().sort_values(ascending=False)\n",
    "sns.barplot(x=avg_sales_by_genre.values, y=avg_sales_by_genre.index, palette='Set3')\n",
    "plt.title('Average Global Sales by Genre')\n",
    "plt.xlabel('Average Global Sales (Millions)')\n",
    "plt.ylabel('Genre')\n",
    "plt.tight_layout()\n",
    "plt.savefig('genre_avg_sales.png')\n",
    "plt.show()\n",
    "\n",
    "print(\"Genre sales performance:\")\n",
    "for genre, sales in avg_sales_by_genre.items():\n",
    "    print(f\"{genre}: {sales:.2f} million\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 5. NUMERICAL FEATURES ANALYSIS"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print(\"\\n3. NUMERICAL FEATURES ANALYSIS\")\n",
    "print(\"-\" * 50)\n",
    "\n",
    "# Identify numerical features\n",
    "numerical_features = ['Year_of_Release', 'NA_Sales', 'EU_Sales', 'JP_Sales', 'Other_Sales', 'Global_Sales', 'Critic_Score', 'User_Score']\n",
    "available_numerical = [col for col in numerical_features if col in sampled_data.columns]\n",
    "print(f\"Available numerical features: {available_numerical}\")\n",
    "\n",
    "# Summary statistics for numerical variables\n",
    "print(\"\\nSummary statistics for sales data:\")\n",
    "sales_columns = ['NA_Sales', 'EU_Sales', 'JP_Sales', 'Other_Sales', 'Global_Sales']\n",
    "available_sales = [col for col in sales_columns if col in sampled_data.columns]\n",
    "numeric_data = sampled_data[available_sales].describe()\n",
    "print(numeric_data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Sales distributions histograms\n",
    "plt.figure(figsize=(15, 12))\n",
    "sales_cols_to_plot = ['NA_Sales', 'EU_Sales', 'JP_Sales', 'Other_Sales', 'Global_Sales']\n",
    "available_sales_cols = [col for col in sales_cols_to_plot if col in sampled_data.columns]\n",
    "\n",
    "for i, column in enumerate(available_sales_cols):\n",
    "    plt.subplot(3, 2, i+1)\n",
    "    sampled_data[column].hist(bins=50, alpha=0.7, color=plt.cm.Set3(i))\n",
    "    plt.title(f'{column} Distribution')\n",
    "    plt.xlabel(f'{column} (Millions)')\n",
    "    plt.ylabel('Frequency')\n",
    "    plt.grid(True, alpha=0.3)\n",
    "\n",
    "plt.tight_layout()\n",
    "plt.savefig('sales_distributions.png')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Box plots for sales data\n",
    "plt.figure(figsize=(14, 8))\n",
    "sales_data = sampled_data[available_sales_cols]\n",
    "sns.boxplot(data=sales_data)\n",
    "plt.title('Sales Distribution Box Plots')\n",
    "plt.ylabel('Sales (Millions)')\n",
    "plt.xticks(rotation=45)\n",
    "plt.tight_layout()\n",
    "plt.savefig('sales_boxplots.png')\n",
    "plt.show()\n",
    "\n",
    "# Identify outliers\n",
    "print(\"\\nOutlier analysis (values above 95th percentile):\")\n",
    "for col in available_sales_cols:\n",
    "    q95 = sampled_data[col].quantile(0.95)\n",
    "    outliers = sampled_data[sampled_data[col] > q95]\n",
    "    print(f\"{col}: {len(outliers)} outliers (>{q95:.2f} million)\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Global Sales detailed analysis\n",
    "plt.figure(figsize=(14, 6))\n",
    "\n",
    "plt.subplot(1, 2, 1)\n",
    "sampled_data['Global_Sales'].hist(bins=50, alpha=0.7, color='skyblue')\n",
    "plt.title('Global Sales Distribution')\n",
    "plt.xlabel('Global Sales (Millions)')\n",
    "plt.ylabel('Frequency')\n",
    "plt.axvline(sampled_data['Global_Sales'].mean(), color='red', linestyle='--', label=f'Mean: {sampled_data[\"Global_Sales\"].mean():.2f}')\n",
    "plt.axvline(sampled_data['Global_Sales'].median(), color='green', linestyle='--', label=f'Median: {sampled_data[\"Global_Sales\"].median():.2f}')\n",
    "plt.legend()\n",
    "plt.grid(True, alpha=0.3)\n",
    "\n",
    "plt.subplot(1, 2, 2)\n",
    "sns.boxplot(y=sampled_data['Global_Sales'], color='lightcoral')\n",
    "plt.title('Global Sales Box Plot')\n",
    "plt.ylabel('Global Sales (Millions)')\n",
    "\n",
    "plt.tight_layout()\n",
    "plt.savefig('global_sales_analysis.png')\n",
    "plt.show()\n",
    "\n",
    "print(f\"\\nGlobal Sales Statistics:\")\n",
    "print(f\"Mean: {sampled_data['Global_Sales'].mean():.2f} million\")\n",
    "print(f\"Median: {sampled_data['Global_Sales'].median():.2f} million\")\n",
    "print(f\"Standard Deviation: {sampled_data['Global_Sales'].std():.2f} million\")\n",
    "print(f\"Minimum: {sampled_data['Global_Sales'].min():.2f} million\")\n",
    "print(f\"Maximum: {sampled_data['Global_Sales'].max():.2f} million\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 6. TEMPORAL ANALYSIS"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Games released by year\n",
    "plt.figure(figsize=(16, 6))\n",
    "year_counts = sampled_data['Year_of_Release'].value_counts().sort_index()\n",
    "year_counts.plot(kind='line', marker='o', linewidth=2, markersize=4)\n",
    "plt.title('Number of Games Released by Year')\n",
    "plt.xlabel('Year of Release')\n",
    "plt.ylabel('Number of Games')\n",
    "plt.grid(True, alpha=0.3)\n",
    "plt.tight_layout()\n",
    "plt.savefig('games_per_year.png')\n",
    "plt.show()\n",
    "\n",
    "print(\"Games released by year (top 10 years):\")\n",
    "top_years = year_counts.nlargest(10)\n",
    "for year, count in top_years.items():\n",
    "    print(f\"{int(year)}: {count} games\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Average sales by year\n",
    "yearly_avg_sales = sampled_data.groupby('Year_of_Release')['Global_Sales'].mean()\n",
    "plt.figure(figsize=(16, 6))\n",
    "yearly_avg_sales.plot(kind='line', marker='s', linewidth=2, markersize=4, color='red')\n",
    "plt.title('Average Global Sales by Year of Release')\n",
    "plt.xlabel('Year of Release')\n",
    "plt.ylabel('Average Global Sales (Millions)')\n",
    "plt.grid(True, alpha=0.3)\n",
    "plt.tight_layout()\n",
    "plt.savefig('yearly_avg_sales.png')\n",
    "plt.show()\n",
    "\n",
    "print(\"\\nYears with highest average sales:\")\n",
    "top_sales_years = yearly_avg_sales.nlargest(10)\n",
    "for year, sales in top_sales_years.items():\n",
    "    print(f\"{int(year)}: {sales:.2f} million average\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Decade analysis\n",
    "sampled_data['Decade'] = (sampled_data['Year_of_Release'] // 10) * 10\n",
    "decade_analysis = sampled_data.groupby('Decade').agg({\n",
    "    'Name': 'count',\n",
    "    'Global_Sales': ['mean', 'sum', 'median']\n",
    "}).round(2)\n",
    "\n",
    "decade_analysis.columns = ['Game_Count', 'Avg_Sales', 'Total_Sales', 'Median_Sales']\n",
    "print(\"\\nDecade Analysis:\")\n",
    "print(decade_analysis)\n",
    "\n",
    "# Visualize decade trends\n",
    "fig, axes = plt.subplots(2, 2, figsize=(15, 10))\n",
    "\n",
    "decade_analysis['Game_Count'].plot(kind='bar', ax=axes[0,0], color='skyblue')\n",
    "axes[0,0].set_title('Games Released by Decade')\n",
    "axes[0,0].set_ylabel('Number of Games')\n",
    "\n",
    "decade_analysis['Avg_Sales'].plot(kind='bar', ax=axes[0,1], color='lightcoral')\n",
    "axes[0,1].set_title('Average Sales by Decade')\n",
    "axes[0,1].set_ylabel('Average Sales (Millions)')\n",
    "\n",
    "decade_analysis['Total_Sales'].plot(kind='bar', ax=axes[1,0], color='lightgreen')\n",
    "axes[1,0].set_title('Total Sales by Decade')\n",
    "axes[1,0].set_ylabel('Total Sales (Millions)')\n",
    "\n",
    "decade_analysis['Median_Sales'].plot(kind='bar', ax=axes[1,1], color='gold')\n",
    "axes[1,1].set_title('Median Sales by Decade')\n",
    "axes[1,1].set_ylabel('Median Sales (Millions)')\n",
    "\n",
    "plt.tight_layout()\n",
    "plt.savefig('decade_analysis.png')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 7. CORRELATION ANALYSIS"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print(\"\\n4. CORRELATION ANALYSIS\")\n",
    "print(\"-\" * 50)\n",
    "\n",
    "# Select numerical columns for correlation\n",
    "numeric_columns = ['NA_Sales', 'EU_Sales', 'JP_Sales', 'Other_Sales', 'Global_Sales', 'Year_of_Release']\n",
    "available_numeric = [col for col in numeric_columns if col in sampled_data.columns]\n",
    "numeric_data = sampled_data[available_numeric]\n",
    "\n",
    "# Calculate correlation matrix\n",
    "correlation_matrix = numeric_data.corr()\n",
    "print(\"Correlation matrix:\")\n",
    "print(correlation_matrix)\n",
    "\n",
    "# Visualize correlation matrix\n",
    "plt.figure(figsize=(12, 10))\n",
    "mask = np.triu(np.ones_like(correlation_matrix, dtype=bool))\n",
    "sns.heatmap(correlation_matrix, mask=mask, annot=True, cmap='coolwarm', \n",
    "            vmin=-1, vmax=1, center=0, square=True, linewidths=0.5)\n",
    "plt.title('Correlation Matrix of Numerical Variables')\n",
    "plt.tight_layout()\n",
    "plt.savefig('correlation_matrix.png')\n",
    "plt.show()\n",
    "\n",
    "# Find strongest correlations\n",
    "corr_pairs = []\n",
    "for i in range(len(correlation_matrix.columns)):\n",
    "    for j in range(i+1, len(correlation_matrix.columns)):\n",
    "        corr_pairs.append({\n",
    "            'Feature1': correlation_matrix.columns[i],\n",
    "            'Feature2': correlation_matrix.columns[j],\n",
    "            'Correlation': correlation_matrix.iloc[i, j]\n",
    "        })\n",
    "\n",
    "corr_df = pd.DataFrame(corr_pairs).sort_values('Correlation', key=abs, ascending=False)

print("\\nStrongest correlations:\")\nprint(corr_df.head(10))\n